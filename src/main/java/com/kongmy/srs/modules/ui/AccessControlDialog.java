/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.kongmy.srs.modules.ui;

import com.kongmy.core.Application;
import com.kongmy.core.DataContext;
import com.kongmy.srs.modules.AccessControlModule;
import com.kongmy.srs.modules.AccessControlModule.AccessControlData;
import com.kongmy.srs.modules.ActionResourceConstraintModule;
import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JCheckBox;
import com.kongmy.srs.modules.OntologyModule;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

/**
 *
 * @author Kong My
 */
public class AccessControlDialog extends javax.swing.JDialog {

    /**
     * Creates new form AccessControlDialog
     */
    public AccessControlDialog(java.awt.Frame parent, boolean modal, OntologyModule module) {
        super(parent, modal);
        this.module = module;
        this.domainModel = new DefaultComboBoxModel<>();
        this.moduleModel = new DefaultComboBoxModel<>();
        this.actorModel = new DefaultComboBoxModel<>();
        this.dataMap = new HashMap<>();

        initData();
        initComponents();
        accessControlCheckboxPanel.setPanelNames("Allowed Actors", "Restricted Actors");

        UpdateModules();
        UpdateActors();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        accessControlPanel = new javax.swing.JPanel();
        accessControlCheckboxPanel = new com.kongmy.srs.ui.CheckboxDualPanel();
        lblSelectedModule = new javax.swing.JLabel();
        cbxSelectedModule = new javax.swing.JComboBox();
        actionControlPanel = new javax.swing.JPanel();
        lblSelectedModule1 = new javax.swing.JLabel();
        cbxSelectedActor = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        panelActions = new javax.swing.JPanel();
        cbxSelectedDomain = new javax.swing.JComboBox();
        lblSelectedDomain = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Configure Access Control");

        lblSelectedModule.setText("Selected Module:");

        cbxSelectedModule.setModel(moduleModel);
        cbxSelectedModule.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxSelectedModuleItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout accessControlPanelLayout = new javax.swing.GroupLayout(accessControlPanel);
        accessControlPanel.setLayout(accessControlPanelLayout);
        accessControlPanelLayout.setHorizontalGroup(
            accessControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accessControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(accessControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(accessControlCheckboxPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
                    .addGroup(accessControlPanelLayout.createSequentialGroup()
                        .addComponent(lblSelectedModule, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbxSelectedModule, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        accessControlPanelLayout.setVerticalGroup(
            accessControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, accessControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(accessControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxSelectedModule, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSelectedModule))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(accessControlCheckboxPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabbedPane.addTab("Access Control", accessControlPanel);

        lblSelectedModule1.setText("Selected Actor:");

        cbxSelectedActor.setModel(actorModel);
        cbxSelectedActor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxSelectedActorItemStateChanged(evt);
            }
        });

        jScrollPane1.setBorder(null);

        panelActions.setBorder(javax.swing.BorderFactory.createTitledBorder("Allowed Actions:"));
        panelActions.setLayout(new javax.swing.BoxLayout(panelActions, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane1.setViewportView(panelActions);

        javax.swing.GroupLayout actionControlPanelLayout = new javax.swing.GroupLayout(actionControlPanel);
        actionControlPanel.setLayout(actionControlPanelLayout);
        actionControlPanelLayout.setHorizontalGroup(
            actionControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(actionControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(actionControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(actionControlPanelLayout.createSequentialGroup()
                        .addComponent(lblSelectedModule1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbxSelectedActor, 0, 333, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        actionControlPanelLayout.setVerticalGroup(
            actionControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(actionControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(actionControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSelectedModule1)
                    .addComponent(cbxSelectedActor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        tabbedPane.addTab("Action Control", actionControlPanel);

        cbxSelectedDomain.setModel(domainModel);
        cbxSelectedDomain.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxSelectedDomainItemStateChanged(evt);
            }
        });

        lblSelectedDomain.setText("Selected Domain:");

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabbedPane)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblSelectedDomain, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbxSelectedDomain, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxSelectedDomain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSelectedDomain))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnCancel))
                .addContainerGap())
        );

        tabbedPane.getAccessibleContext().setAccessibleName("Action Control");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        DataContext dataContext = Application.getInstance().getDataContext();
        dataContext.getData().put(AccessControlModule.DATA_ACCESS_CONTROL, dataMap);
        dataContext.setSaved(false);
        module.Save();
        dispose();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void cbxSelectedActorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxSelectedActorItemStateChanged
        String selectedString = cbxSelectedActor.getSelectedItem() == null
                ? "" : cbxSelectedActor.getSelectedItem().toString();

        panelActions.removeAll();
        if (!selectedString.isEmpty()) {
            UpdateActionControlData();
        }
    }//GEN-LAST:event_cbxSelectedActorItemStateChanged

    private void cbxSelectedDomainItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxSelectedDomainItemStateChanged
        UpdateModules();
        UpdateActors();
    }//GEN-LAST:event_cbxSelectedDomainItemStateChanged

    private void cbxSelectedModuleItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxSelectedModuleItemStateChanged
        String selectedString = cbxSelectedModule.getSelectedItem() == null
                ? "" : cbxSelectedModule.getSelectedItem().toString();

        accessControlCheckboxPanel.ClearPanels();
        if (!selectedString.isEmpty()) {
            UpdateAccessControlData();
        }
    }//GEN-LAST:event_cbxSelectedModuleItemStateChanged

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        module.Load();
        dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.kongmy.srs.ui.CheckboxDualPanel accessControlCheckboxPanel;
    private javax.swing.JPanel accessControlPanel;
    private javax.swing.JPanel actionControlPanel;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox cbxSelectedActor;
    private javax.swing.JComboBox cbxSelectedDomain;
    private javax.swing.JComboBox cbxSelectedModule;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblSelectedDomain;
    private javax.swing.JLabel lblSelectedModule;
    private javax.swing.JLabel lblSelectedModule1;
    private javax.swing.JPanel panelActions;
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables
    private final OntologyModule module;
    private final DefaultComboBoxModel<String> domainModel;
    private final DefaultComboBoxModel<String> moduleModel;
    private final DefaultComboBoxModel<String> actorModel;
    private final Map<String, AccessControlData> dataMap;

    private void UpdateAccessControlData() {
        String selectedDomain = cbxSelectedDomain.getSelectedItem().toString();
        String selectedModule = cbxSelectedModule.getSelectedItem().toString();

        List<String> allowedActor = dataMap.get(selectedDomain).getModuleAccessMap().get(selectedModule);
        List<String> restrictedActor = module.getActorsFrom(selectedDomain);
        restrictedActor.removeAll(allowedActor);

        ActionListener moduleAccessListener = (e) -> {
            JCheckBox cbx = (JCheckBox) e.getSource();
            if (cbx.isSelected()) {
                module.AddActorTo(selectedModule, cbx.getText());
                allowedActor.add(cbx.getText());
            } else {
                module.RemoveActorFrom(selectedModule, cbx.getText());
                allowedActor.remove(cbx.getText());
            }
        };

        accessControlCheckboxPanel.PopulateData(
                allowedActor, restrictedActor,
                moduleAccessListener, moduleAccessListener);
    }

    public void UpdateActionControlData() {
        String selectedDomain = cbxSelectedDomain.getSelectedItem().toString();
        String selectedActor = cbxSelectedActor.getSelectedItem().toString();

        List<String> selectedActions = dataMap.get(selectedDomain).getActionControlMap().get(selectedActor);
        List<String> notSelectedActions = module.getActionsFrom(selectedDomain);
        notSelectedActions.removeAll(selectedActions);

        ActionListener actionListener = (e) -> {
            JCheckBox cbx = (JCheckBox) e.getSource();
            if (cbx.isSelected()) {
                module.AddActionTo(selectedActor, cbx.getText());
                selectedActions.add(cbx.getText());
            } else {
                module.RemoveActionFrom(selectedActor, cbx.getText());
                selectedActions.remove(cbx.getText());
            }
        };
        
        selectedActions.forEach((action) -> {
            JCheckBox cbx = new JCheckBox(action, true);
            cbx.addActionListener(actionListener);
            panelActions.add(cbx);
        });

        notSelectedActions.forEach((action) -> {
            JCheckBox cbx = new JCheckBox(action, false);
            cbx.addActionListener(actionListener);
            panelActions.add(cbx);
        });
        
        panelActions.setSize(panelActions.getPreferredSize());
    }

    private void UpdateModules() {
        moduleModel.removeAllElements();
        dataMap.get(cbxSelectedDomain.getSelectedItem().toString()).getModuleAccessMap().keySet()
                .forEach((val) -> moduleModel.addElement(val));
    }

    private void UpdateActors() {
        actorModel.removeAllElements();
        dataMap.get(cbxSelectedDomain.getSelectedItem().toString()).getActionControlMap().keySet()
                .forEach((val) -> actorModel.addElement(val));
    }

    private void initData() {
        List<String> allDomains = module.getAllDomains();

        // Initialize data
        allDomains.forEach((domain) -> {
            domainModel.addElement(domain);

            AccessControlData data = new AccessControlData(domain);
            dataMap.put(domain, data);

            Map<String, List<String>> moduleAccessMap = data.getModuleAccessMap();
            Map<String, List<String>> actionControlMap = data.getActionControlMap();

            module.getModulesFrom(domain).forEach((module) -> moduleAccessMap.put(module, new ArrayList<>()));
            module.getActorsFrom(domain).forEach((actor) -> actionControlMap.put(actor, new ArrayList<>()));
        });

        Map<String, AccessControlData> currentData = (Map<String, AccessControlData>) Application
                .getInstance().getDataContext().getData()
                .get(AccessControlModule.DATA_ACCESS_CONTROL);

        if (currentData != null) {
            currentData.forEach((domainName, data) -> {
                dataMap.put(domainName, data.clone());
            });
        }
    }

}
