/*
 */
package com.kongmy.srs.modules.ui;

import com.kongmy.core.Application;
import com.kongmy.core.DataContext;
import com.kongmy.srs.modules.ActionResourceConstraintModule;
import com.kongmy.srs.modules.ActionResourceConstraintModule.ActionResourceConstraintData;
import com.kongmy.srs.modules.OntologyModule;
import java.awt.CardLayout;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultListModel;

/**
 *
 * @author Kong My
 */
public class ActionResourceConstraintDialog extends javax.swing.JDialog {

    /**
     * Creates new form ActionResourceContraintDialog
     */
    public ActionResourceConstraintDialog(java.awt.Frame parent, boolean modal, OntologyModule module) {
        super(parent, modal);
        this.module = module;
        this.listModel = new DefaultListModel();
        this.panelMap = new HashMap<>();
        this.dataMap = new HashMap<>();

        initComponents();
        initData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelActions = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        actionList = new javax.swing.JList();
        btnCancel = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        panelCard = new javax.swing.JPanel();
        panelNoAction = new javax.swing.JPanel();
        lbl = new javax.swing.JLabel();
        panelMetrics = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        panelActions.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Actions", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        panelActions.setLayout(new javax.swing.BoxLayout(panelActions, javax.swing.BoxLayout.Y_AXIS));

        actionList.setModel(listModel);
        actionList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        actionList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                actionListValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(actionList);

        panelActions.add(jScrollPane4);

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        panelCard.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Resource Constraints", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        panelCard.setLayout(new java.awt.CardLayout());

        lbl.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl.setText("Please select an action");

        javax.swing.GroupLayout panelNoActionLayout = new javax.swing.GroupLayout(panelNoAction);
        panelNoAction.setLayout(panelNoActionLayout);
        panelNoActionLayout.setHorizontalGroup(
            panelNoActionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelNoActionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelNoActionLayout.setVerticalGroup(
            panelNoActionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelNoActionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelCard.add(panelNoAction, "noAction");

        panelMetrics.setLayout(new javax.swing.BoxLayout(panelMetrics, javax.swing.BoxLayout.Y_AXIS));
        panelCard.add(panelMetrics, "hasAction");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelActions, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelCard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelActions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelCard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnSave))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void actionListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_actionListValueChanged
        Object selectedObject = actionList.getSelectedValue();
        CardLayout layout = (CardLayout) panelCard.getLayout();

        if (selectedObject != null) {
            layout.show(panelCard, HAS_ACTION);
            String actionName = selectedObject.toString();

            panelMap.forEach((metric, panel) -> {
                panel.setResourceConstraintListener(null);
                panel.UpdateData(dataMap.get(actionName).get(metric));
                panel.setResourceConstraintListener(new ResourceConstraintPanel.ResourceConstraintListener() {

                    @Override
                    public void onCheckBoxStatedChanged(boolean isChecked, String resourceName, String value) {
                        ActionResourceConstraintData data = dataMap.get(actionName).get(resourceName);
                        if (isChecked) {
                            module.AddResourceConstraintTo(actionName, resourceName);
                            data.setChecked(true);
                        } else {
                            module.RemoveResourceConstraintFrom(actionName, resourceName);
                            data.setChecked(false);
                        }
                    }

                    @Override
                    public void onTextBoxDocumentChanged(String resourceName, String oldValue, String newValue) {
                        ActionResourceConstraintData data = dataMap.get(actionName).get(resourceName);
                        data.setValue(newValue);
                    }
                });
            });
        } else {
            layout.show(panelCard, NO_ACTION);
        }
    }//GEN-LAST:event_actionListValueChanged

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        module.Load();
        dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        DataContext dataContext = Application.getInstance().getDataContext();
        dataContext.getData().put(ActionResourceConstraintModule.DATA_ACTION_RESOURCE_CONSTRAINT_MAP, dataMap);
        dataContext.setSaved(false);
        module.Save();
        dispose();
    }//GEN-LAST:event_btnSaveActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList actionList;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSave;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lbl;
    private javax.swing.JPanel panelActions;
    private javax.swing.JPanel panelCard;
    private javax.swing.JPanel panelMetrics;
    private javax.swing.JPanel panelNoAction;
    // End of variables declaration//GEN-END:variables
    private static final String NO_ACTION = "noAction";
    private static final String HAS_ACTION = "hasAction";

    private final OntologyModule module;
    private final DefaultListModel listModel;
    private final Map<String, Map<String, ActionResourceConstraintData>> dataMap;
    private final Map<String, ResourceConstraintPanel> panelMap;

    private void initData() {
        // Duplicate current data
        Map<String, Map<String, ActionResourceConstraintData>> currentData = (Map<String, Map<String, ActionResourceConstraintData>>) Application
                .getInstance().getDataContext().getData()
                .get(ActionResourceConstraintModule.DATA_ACTION_RESOURCE_CONSTRAINT_MAP);

        List<String> allActions = module.getAllActions();
        List<String> allMetrics = module.getAllResourceConstraintMetrics();

        // Initialize data
        allActions.forEach((action) -> {
            listModel.addElement(action);
            Map<String, ActionResourceConstraintData> map = new HashMap<>();
            allMetrics.forEach((metric) -> map.put(metric, new ActionResourceConstraintData(metric, "")));
            dataMap.put(action, map);
        });

        // Add existing data
        if (currentData != null) {
            currentData.forEach((action, metricMap) -> {
                metricMap.forEach((metric, value) -> {
                    dataMap.get(action).put(metric, value.clone());
                });
            });
        }

        // Create card for each action
        allMetrics.forEach((metric) -> {
            ResourceConstraintPanel panel = new ResourceConstraintPanel(metric, "");
            panelMap.put(metric, panel);
            panelMetrics.add(panel);
        });
    }

}
