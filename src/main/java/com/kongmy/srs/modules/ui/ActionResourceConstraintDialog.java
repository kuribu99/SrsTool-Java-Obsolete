/*
 */
package com.kongmy.srs.modules.ui;

import com.kongmy.core.Application;
import com.kongmy.srs.modules.ActionResourceConstraintModule;
import com.kongmy.srs.modules.OntologyModule;
import java.awt.CardLayout;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultListModel;

/**
 *
 * @author Kong My
 */
public class ActionResourceConstraintDialog extends javax.swing.JDialog
        implements ResourceConstraintPanel.ResourceConstraintListener {

    /**
     * Creates new form ActionResourceContraintDialog
     */
    public ActionResourceConstraintDialog(java.awt.Frame parent, boolean modal, OntologyModule module) {
        super(parent, modal);
        this.module = module;
        this.listModel = new DefaultListModel();
        this.panelMap = new HashMap<>();
        this.dataMap = new HashMap<>();

        initComponents();
        initData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelActions = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        actionList = new javax.swing.JList();
        btnCancel = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        panelCard = new javax.swing.JPanel();
        panelNoAction = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        panelResourceConstraints = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        panelActions.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Actions", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        panelActions.setLayout(new javax.swing.BoxLayout(panelActions, javax.swing.BoxLayout.Y_AXIS));

        actionList.setModel(listModel);
        actionList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        actionList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                actionListValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(actionList);

        panelActions.add(jScrollPane4);

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        panelCard.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Resource Constraints", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        panelCard.setLayout(new java.awt.CardLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Please select an action");

        javax.swing.GroupLayout panelNoActionLayout = new javax.swing.GroupLayout(panelNoAction);
        panelNoAction.setLayout(panelNoActionLayout);
        panelNoActionLayout.setHorizontalGroup(
            panelNoActionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelNoActionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelNoActionLayout.setVerticalGroup(
            panelNoActionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelNoActionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelCard.add(panelNoAction, "noAction");

        jScrollPane1.setBorder(null);

        panelResourceConstraints.setLayout(new javax.swing.BoxLayout(panelResourceConstraints, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane1.setViewportView(panelResourceConstraints);

        panelCard.add(jScrollPane1, "hasAction");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelActions, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelCard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelActions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelCard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnSave))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void actionListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_actionListValueChanged
        int selectedIndex = actionList.getSelectedIndex();
        CardLayout layout = (CardLayout) panelCard.getLayout();

        if (selectedIndex >= 0) {
            String actionName = actionList.getSelectedValue().toString();
            List<String> addedConstraints = module.getResourceConstraintFrom(actionName);

            layout.show(panelCard, HAS_ACTION);

            if (!dataMap.containsKey(actionName)) {
                dataMap.put(actionName, new HashMap<>());
            }

            panelMap.entrySet().stream().forEach((entry) -> {
                String constraintName = entry.getKey();
                ResourceConstraintPanel panel = entry.getValue();
                Map<String, String> constraintMap = dataMap.get(actionName);
                
                panel.setCheckBoxState(addedConstraints.contains(constraintName));
                if (!constraintMap.containsKey(constraintName)) {
                    constraintMap.put(constraintName, "");
                }
                panel.setConstraintValue(constraintMap.get(constraintName));
            });
        } else {
            layout.show(panelCard, NO_ACTION);
        }
    }//GEN-LAST:event_actionListValueChanged

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        module.Load();
        dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        Application.getInstance().getDataContext().putData(ActionResourceConstraintModule.CONSTRAINT_MAP, dataMap);
        module.Save();
        dispose();
    }//GEN-LAST:event_btnSaveActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList actionList;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPanel panelActions;
    private javax.swing.JPanel panelCard;
    private javax.swing.JPanel panelNoAction;
    private javax.swing.JPanel panelResourceConstraints;
    // End of variables declaration//GEN-END:variables
    private static final String NO_ACTION = "noAction";
    private static final String HAS_ACTION = "hasAction";
    private final OntologyModule module;
    private final DefaultListModel listModel;
    private final Map<String, Map<String, String>> dataMap;
    private final Map<String, ResourceConstraintPanel> panelMap;

    private void initData() {
        // Duplicate current data
        Map<String, Map<String, String>> currentData = (Map<String, Map<String, String>>) Application
                .getInstance().getDataContext()
                .getData(ActionResourceConstraintModule.CONSTRAINT_MAP);

        if (currentData != null) {
            currentData.forEach((k, v) -> {
                Map<String, String> newValue = new HashMap<>();
                newValue.putAll(v);
                dataMap.put(k, newValue);
            });
        }

        module.getAllActions().stream().forEach((val) -> listModel.addElement(val));
        module.getAllResourceConstraintMetrics().stream().forEach((metric) -> {
            ResourceConstraintPanel panel = new ResourceConstraintPanel(metric, "", this);
            panelResourceConstraints.add(panel);
            panelMap.put(metric, panel);
        });
        panelResourceConstraints.setSize(panelResourceConstraints.getPreferredSize());
    }

    @Override
    public void onCheckBoxStatedChanged(boolean isChecked, String resourceName, String value) {
        String actionName = actionList.getSelectedValue().toString();

        if (isChecked) {
            module.AddResourceConstraintTo(actionName, resourceName);
            dataMap.get(actionName).put(resourceName, value);
        } else {
            module.RemoveResourceConstraintFrom(actionName, resourceName);
            dataMap.get(actionName).remove(resourceName, value);
        }
    }

    @Override
    public void onTextBoxKeyUp(String resourceName, String oldValue, String newValue) {
        String actionName = actionList.getSelectedValue().toString();
        dataMap.get(actionName).put(resourceName, newValue);
    }

}
