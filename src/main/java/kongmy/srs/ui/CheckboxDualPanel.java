/*
 */
package kongmy.srs.ui;

import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.JCheckBox;
import javax.swing.JPanel;
import javax.swing.border.TitledBorder;

/**
 *
 * @author Kong My
 */
public class CheckboxDualPanel extends javax.swing.JPanel {

    /**
     * Creates new form CheckboxDualPanel
     */
    public CheckboxDualPanel() {
        initComponents();
    }

    public CheckboxDualPanel(String leftPanelName, String rightPanelName) {
        this();
        setPanelNames(leftPanelName, rightPanelName);
    }

    public CheckboxDualPanel(
            String leftPanelName, String rightPanelName,
            List<String> leftData, List<String> rightData,
            ActionListener leftDataActionListener, ActionListener rightDataActionListener) {

        this(leftPanelName, rightPanelName);
        PopulateData(leftData, rightData, leftDataActionListener, rightDataActionListener);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        leftScrollPane = new javax.swing.JScrollPane();
        leftPanel = new javax.swing.JPanel();
        rightScrollPane = new javax.swing.JScrollPane();
        rightPanel = new javax.swing.JPanel();

        leftScrollPane.setBorder(null);

        leftPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        leftPanel.setLayout(new javax.swing.BoxLayout(leftPanel, javax.swing.BoxLayout.Y_AXIS));
        leftScrollPane.setViewportView(leftPanel);

        rightScrollPane.setBorder(null);

        rightPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        rightPanel.setLayout(new javax.swing.BoxLayout(rightPanel, javax.swing.BoxLayout.Y_AXIS));
        rightScrollPane.setViewportView(rightPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(leftScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rightScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(leftScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE)
            .addComponent(rightScrollPane, javax.swing.GroupLayout.Alignment.TRAILING)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel leftPanel;
    private javax.swing.JScrollPane leftScrollPane;
    private javax.swing.JPanel rightPanel;
    private javax.swing.JScrollPane rightScrollPane;
    // End of variables declaration//GEN-END:variables
    private String leftPanelName;
    private String rightPanelName;

    public void setPanelNames(String leftPanelName, String rightPanelName) {
        ((TitledBorder) this.leftPanel.getBorder()).setTitle(leftPanelName);
        ((TitledBorder) this.rightPanel.getBorder()).setTitle(rightPanelName);
    }

    public JPanel getLeftPanel() {
        return this.leftPanel;
    }

    public JPanel getRightPanel() {
        return this.rightPanel;
    }

    private ActionListener getPanelTransferListener(JCheckBox cbx) {
        return (e) -> {
            if (cbx.isSelected()) {
                rightPanel.remove(cbx);
                leftPanel.add(cbx);
            } else {
                leftPanel.remove(cbx);
                rightPanel.add(cbx);
            }
            UpdatePanels();
        };
    }

    public void PopulateData(
            List<String> leftData, List<String> rightData,
            ActionListener leftDataActionListener, ActionListener rightDataActionListener) {

        ClearPanels();

        leftData.forEach((datum) -> {
            JCheckBox cbx = new JCheckBox(datum, true);
            cbx.addActionListener(getPanelTransferListener(cbx));
            if (leftDataActionListener != null) {
                cbx.addActionListener(leftDataActionListener);
            }
            leftPanel.add(cbx);
        });

        rightData.forEach((datum) -> {
            JCheckBox cbx = new JCheckBox(datum, false);
            cbx.addActionListener(getPanelTransferListener(cbx));
            if (rightDataActionListener != null) {
                cbx.addActionListener(rightDataActionListener);
            }
            rightPanel.add(cbx);
        });

        UpdatePanels();
    }

    public void UpdatePanels() {
        leftPanel.setSize(leftPanel.getPreferredSize());
        rightPanel.setSize(rightPanel.getPreferredSize());
    }

    public void ClearPanels() {
        leftPanel.removeAll();
        rightPanel.removeAll();
    }

}
